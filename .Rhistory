else {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(list_stats[x]))
}
if(is_empty(x)) {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(NULL))
else {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(list_stats[x]))
}
}
if(is_empty(x)) {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(NULL))
} else {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(list_stats[x]))
}
x=unname(which(sapply(names(list_stats), function(x) as.character(69) %in% x), TRUE))
if(is_empty(x)) {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(NULL))
} else {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(list_stats[x]))
}
if(is_empty(x)) {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(list()))
} else {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(list_stats[x]))
}
x=unname(which(sapply(names(list_stats), function(x) as.character(9) %in% x), TRUE))
if(is_empty(x)) {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(list()))
} else {
cbind(" " = "expand", df_catchers %>% filter(id==9), stats=I(list_stats[x]))
}
stat_merge=function(num){
x=unname(which(sapply(names(list_stats),
function(x) as.character(num) %in% x),
TRUE))
if(is_empty(x)) {
cbind(" " = "expand", df_catchers %>% filter(id==num), stats=I(list()))
} else {
cbind(" " = "expand", df_catchers %>% filter(id==num), stats=I(list_stats[x]))
}
}
stat_merge(9)
map_df(.x=df_catchers, .f=stat_merge)
df=map_df(.x=df_catchers, .f=stat_merge)
View(df)
df$stats
View(df)
df=map_df(.x=df_catchers$id, .f=stat_merge)
View(df)
View(df)
View(df[[14]][[1]])
Dat=map_df(.x=9, .f=stat_merge)
View(Dat)
## the callback ####
registerInputHandler("x.child",
function(x, ...) {
fromJSON(toJSON(x, auto_unbox = TRUE, null = "null"),
simplifyDataFrame = FALSE)
},
force = TRUE)
callback = JS(
"var expandColumn = table.column(0).data()[0] === 'plus-sign' ? 0 : 1;",
"table.column(expandColumn).nodes().to$().css({cursor: 'pointer'});",
"",
"// send selected columns of the main table to Shiny",
"var tbl = table.table().node();",
"var tblId = $(tbl).closest('.datatables').attr('id');",
"var selector = 'td:not(:nth-child(' + (expandColumn+1) + '))';",
"table.on('click', selector, function(){",
"  setTimeout(function(){",
"    var indexes = table.rows({selected:true}).indexes();",
"    var indices = Array(indexes.length);",
"    for(var i = 0; i < indices.length; ++i){",
"      indices[i] = indexes[i];",
"    }",
"    Shiny.setInputValue(tblId + '_rows_selected', indices);",
"  },0);",
"});",
"",
"// make the table header of the nested table",
"var format = function(d, childId){",
"  if(d != null){",
"    var html = '<table class=\"compact hover\" id=\"' + ",
"                childId + '\"><thead><tr>';",
"    for(var key in d[d.length-1][0]){",
"      html += '<th>' + key + '</th>';",
"    }",
"    html += '</tr></thead></table>'",
"    return html;",
"  } else {",
"    return '';",
"  }",
"};",
"",
"// row callback to style the rows background colors of the child tables",
"var rowCallback = function(row, dat, displayNum, index){",
"  if($(row).hasClass('odd')){",
"    $(row).css('background-color', 'papayawhip');",
"    $(row).hover(function(){",
"      $(this).css('background-color', '#E6FF99');",
"    }, function() {",
"      $(this).css('background-color', 'papayawhip');",
"    });",
"  } else {",
"    $(row).css('background-color', 'lemonchiffon');",
"    $(row).hover(function(){",
"      $(this).css('background-color', '#DDFF75');",
"    }, function() {",
"      $(this).css('background-color', 'lemonchiffon');",
"    });",
"  }",
"};",
"",
"// header callback to style the header of the child tables",
"var headerCallback = function(thead, data, start, end, display){",
"  $('th', thead).css({",
"    'border-top': '3px solid indigo',",
"    'color': 'indigo',",
"    'background-color': '#fadadd'",
"  });",
"};",
"",
"// make the child table",
"var format_datatable = function(d, childId){",
"  var dataset = [];",
"  var n = d.length - 1;",
"  for(var i = 0; i < d[n].length; i++){",
"    var datarow = $.map(d[n][i], function(value, index){",
"      return [value];",
"    });",
"    dataset.push(datarow);",
"  }",
"  var id = 'table#' + childId;",
"  var subtable = $(id).DataTable({",
"             'data': dataset,",
"             'autoWidth': true,",
"             'deferRender': true,",
"             'info': false,",
"             'lengthChange': false,",
"             'ordering': d[n].length > 1,",
"             'order': [],",
"             'paging': false,",
"             'scrollX': false,",
"             'scrollY': false,",
"             'searching': false,",
"             'sortClasses': false,",
"             'rowCallback': rowCallback,",
"             'headerCallback': headerCallback,",
"             'select': {style: 'multi'},",
"             'columnDefs': [{targets: '_all', className: 'dt-center'}]",
"           });",
"};",
"",
"// send selected rows of the children tables to shiny server",
"var nrows = table.rows().count();",
"var nullinfo = Array(nrows);",
"for(var i = 0; i < nrows; ++i){",
"  nullinfo[i] = {row: i, selected: null};",
"}",
"Shiny.setInputValue(tblId + '_children:x.child', nullinfo);",
"var sendToR = function(){",
"  var info = [];",
"  setTimeout(function(){",
"    for(var i = 0; i < nrows; ++i){",
"      var childId = 'child-' + i;",
"      var childtbl = $('#'+childId).DataTable();",
"      var indexes = childtbl.rows({selected:true}).indexes();",
"      var indices;",
"      if(indexes.length > 0){",
"        indices = Array(indexes.length);",
"        for(var j = 0; j < indices.length; ++j){",
"          indices[j] = indexes[j];",
"        }",
"      } else {",
"        indices = null;",
"      }",
"      info.push({row: i, selected: indices});",
"    }",
"    Shiny.setInputValue(tblId + '_children:x.child', info);",
"  }, 0);",
"}",
"$('body').on('click', '[id^=child-] td', sendToR);",
"",
"// click event to show/hide the child tables",
"table.on('click', 'td.details-control', function () {",
"  var cell = table.cell(this);",
"      row = table.row($(this).closest('tr'));",
"  if(row.child.isShown()){",
"    row.child.hide();",
"    cell.data('expand');",
"    sendToR();",
"  } else {",
"    var childId = 'child-' + row.index();",
"    row.child(format(row.data(), childId)).show();",
"    row.child.show();",
"    cell.data('collapse-down');",
"    format_datatable(row.data(), childId);",
"  }",
"});")
## render function, to display the glyphicons ####
render <- c(
"function(data, type, row, meta){",
"  if(type === 'display'){",
"    return '<span style=\\\"color:black; font-size:18px\\\">' + ",
"       '<i class=\\\"glyphicon glyphicon-' + data + '\\\"></i></span>';",
"  } else {",
"    return data;",
"  }",
"}"
)
## shiny app ####
ui <- fluidPage(
DTOutput("table"),
br(),
)
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
extensions = "Select", selection = "none",
options = list(
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2, editable=TRUE,
extensions = "Select", selection = "none",
options = list(
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
editable=list(target="cell",
disable=list(columns=c(0:8))),
extensions = "Select", selection = "none",
options = list(
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
editable=list(target="cell",
disable=list(columns=c(0:8))),
extensions = "Select", selection = "none",
options = list(
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
editable=list(target="cell",
disable=list(columns=c(0:10))),
rownames=FALSE,
extensions = "Select", selection = "none",
options = list(
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
editable=list(target="cell",
disable=list(columns=c(0:10))),
rownames=FALSE,
extensions = "Select", selection = "none",
options = list(
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
editable=list(target="cell",
disable=list(columns=c(0:10))),
extensions = "Select", selection = "none",
options = list(
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
stat_merge=function(num){
x=unname(which(sapply(names(list_stats),
function(x) as.character(num) %in% x),
TRUE))
if(is_empty(x)) {
cbind(" " = "expand", df_catchers %>% filter(id==num), edited=0, stats=I(list()))
} else {
cbind(" " = "expand", df_catchers %>% filter(id==num), edited=0, stats=I(list_stats[x]))
}
}
Dat=map_df(.x=9, .f=stat_merge)
Dat
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
editable=list(target="cell",
disable=list(columns=c(0:11))),
extensions = "Select", selection = "none", filter="top",
options = list(
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
editable=list(target="cell",
disable=list(columns=c(0:11))),
extensions = c("Select", "Buttons"),
selection = "none", filter="top",
options = list(
buttons=c("csv"),
server=FALSE,
dom="Bfrtip"),
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
server <- function(input, output){
output[["table"]] <- renderDT({
datatable(Dat, callback = callback, escape = -2,
editable=list(target="cell",
disable=list(columns=c(0:11))),
extensions = c("Select", "Buttons"),
selection = "none", filter="top",
options = list(
buttons=c("csv"),
server=FALSE,
dom="Bfrtip",
select = list(style = "multi", selector = ".selectable"),
autoWidth = FALSE,
columnDefs = list(
list(className = "selectable dt-center",
targets = c(0, 2:ncol(Dat))),
list(visible = FALSE, targets = ncol(Dat)),
list(orderable = FALSE, className = 'details-control',
width = "10px", render = JS(render), targets = 1),
list(className = "dt-center", targets = "_all")
)
)
)
}, server = FALSE)
output[["info-main"]] <- renderText({
capture.output(input[["table_rows_selected"]])
})
output[["info-children"]] <- renderText({
paste0(capture.output(input[["table_children"]]), collapse = "\n")
})
}
shinyApp(ui, server)
